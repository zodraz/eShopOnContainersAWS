version: "3.4"

services:
  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - 4566:4566
    environment:
      - SERVICES=s3,sns,sqs,secretsmanager,dynamodb,cloudfront,cloudwatch,logs
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - ./.localstack:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    command: -config.file=/mnt/config/loki-config.yml
    volumes:
      - ./configs/loki/loki.yml:/mnt/config/loki-config.yml
    ports:
      - "3100:3100"

  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    command: --query.ui-config=/etc/jaeger/jaeger-ui.json --collector.otlp.enabled=true --prometheus.server-url=http://prometheus:9090
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    volumes:
      - ./configs/jaeger/ui.json:/etc/jaeger/jaeger-ui.json
    restart: unless-stopped
    ports:
      - 5775:5775/udp
      - 5778:5778
      - 6831:6831/udp
      - 6832:6832/udp
      - 9411:9411
      - 14268:14268
      - 16686:16686 # Jaeger UI

  # jaeger:
  #   image: jaegertracing/all-in-one:1.51
  #   container_name: jaeger
  #   command: --query.ui-config=/etc/jaeger/jaeger-ui.json --collector.otlp.enabled=true --prometheus.server-url=http://prometheus:9090 --prometheus.query.support-spanmetrics-connector=true
  #   environment:
  #     - METRICS_STORAGE_TYPE=prometheus
  #     - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
  #     - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
  #   volumes:
  #     - ./configs/jaeger/ui.json:/etc/jaeger/jaeger-ui.json
  #   restart: unless-stopped
  #   ports:
  #     - "127.0.0.1:16686:16686"

  otel-collector:
    image: amazon/aws-otel-collector:latest
    container_name: otel-collector
    command: --config /etc/otelcol/otel-collector-config.yml
    volumes:
      - ./configs/otel-collector/otel-collector-config.yml:/etc/otelcol/otel-collector-config.yml
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    ports:
      # - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "4317:4317" # OTLP gRPC receiver
      # - "35670:55679" # zpages extension

  grafana:
    container_name: grafana
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      # - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./configs/grafana/provisioning/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./configs/grafana/provisioning/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./configs/grafana/dashboards/dotnet-otel.json:/etc/grafana/provisioning/dashboards/dotnet-otel.json
      - ./configs/grafana/dashboards/logs.json:/etc/grafana/provisioning/dashboards/logs.json
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: wget -q --tries=1 -O- http://localhost:3000/
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 10s

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    healthcheck:
      test: wget -q --tries=1 -O- http://localhost:9090/
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 10s

  seq:
    container_name: seq
    image: datalust/seq:latest

  sqldata:
    container_name: mssql
    image: mcr.microsoft.com/mssql/server:2019-latest

  nosqldata:
    container_name: mongo
    image: mongo

  basketdata:
    container_name: redis
    image: redis:alpine

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine

  identity-api:
    image: ${REGISTRY:-eshop}/identity.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Identity/Identity.API/Dockerfile
    restart: always
    depends_on:
      - sqldata

  basket-api:
    image: ${REGISTRY:-eshop}/basket.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
    restart: always
    depends_on:
      - basketdata
      - identity-api
      - rabbitmq

  catalog-api:
    image: ${REGISTRY:-eshop}/catalog.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    restart: always
    depends_on:
      - sqldata
      - rabbitmq

  ordering-api:
    image: ${REGISTRY:-eshop}/ordering.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
    restart: always
    depends_on:
      - sqldata
      - rabbitmq

  ordering-backgroundtasks:
    image: ${REGISTRY:-eshop}/ordering.backgroundtasks:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.BackgroundTasks/Dockerfile
    restart: always
    depends_on:
      - sqldata
      - rabbitmq

  marketing-api:
    image: ${REGISTRY:-eshop}/marketing.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Marketing/Marketing.API/Dockerfile
    depends_on:
      - sqldata
      - nosqldata
      - identity-api
      - rabbitmq

  marketing-function:
    image: ${REGISTRY:-eshop}/marketing.function:${PLATFORM:-linux}-${TAG:-latest}
    container_name: marketing-function
    build:
      context: .
      dockerfile: Services/Marketing/Infrastructure/Lambdas/Marketing.Functions/src/Marketing.Functions/Docker/Dockerfile
    depends_on:
      - sqldata
      - nosqldata
      - identity-api
      - rabbitmq

  payment-api:
    image: ${REGISTRY:-eshop}/payment.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Payment/Payment.API/Dockerfile
    restart: always
    depends_on:
      - rabbitmq

  locations-api:
    image: ${REGISTRY:-eshop}/locations.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Location/Locations.API/Dockerfile
    depends_on:
      - nosqldata
      - rabbitmq

  webhooks-api:
    image: ${REGISTRY:-eshop}/webhooks.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Webhooks/Webhooks.API/Dockerfile
    restart: always
    depends_on:
      - sqldata

  # mobileshoppingapigw:
  #   image: envoyproxy/envoy:v1.11.1
  #   container_name: mobileshoppingapigw
  #   restart: always

  # mobilemarketingapigw:
  #   image: envoyproxy/envoy:v1.11.1
  #   container_name: mobilemarketingapigw
  #   restart: always

  # mobileshoppingagg:
  #   image: ${REGISTRY:-eshop}/mobileshoppingagg:${PLATFORM:-linux}-${TAG:-latest}
  #   build:
  #     context: .
  #     dockerfile: ApiGateways/Mobile.Bff.Shopping/aggregator/Dockerfile
  #   restart: always
  #   depends_on:
  #     - nosqldata
  #     - sqldata
  #     - identity-api
  #     - rabbitmq
  #     - ordering-api
  #     - catalog-api
  #     - basket-api

  webshoppingagg:
    image: ${REGISTRY:-eshop}/webshoppingagg:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: ApiGateways/Web.Bff.Shopping/aggregator/Dockerfile
    restart: always
    depends_on:
      - nosqldata
      - sqldata
      - identity-api
      - rabbitmq
      - ordering-api
      - catalog-api
      - basket-api

  ordering-signalrhub:
    image: ${REGISTRY:-eshop}/ordering.signalrhub:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.SignalrHub/Dockerfile
    restart: always
    depends_on:
      - nosqldata
      - sqldata
      - identity-api
      - rabbitmq
      - ordering-api
      - catalog-api
      - basket-api

  webstatus:
    image: ${REGISTRY:-eshop}/webstatus:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Web/WebStatus/Dockerfile
    restart: always

  webspa:
    image: ${REGISTRY:-eshop}/webspa:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Web/WebSPA/Dockerfile
      args:
        NODE_IMAGE: ${NODE_IMAGE:-node:12.0}
    restart: always
    depends_on:
      - webshoppingagg
      - webshoppingapigw

  webmvc:
    image: ${REGISTRY:-eshop}/webmvc:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Web/WebMVC/Dockerfile
    restart: always
    depends_on:
      - webshoppingagg
      - webshoppingapigw

  webhooks-client:
    image: ${REGISTRY:-eshop}/webhooks.client:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Web/WebhookClient/Dockerfile
    restart: always
    depends_on:
      - webhooks-api

  webshoppingapigw:
    image: envoyproxy/envoy:v1.11.1
    container_name: webshoppingapigw

    restart: always

  webmarketingapigw:
    image: envoyproxy/envoy:v1.11.1
    container_name: webmarketingapigw
    restart: always

  #fleetmanager:
  #  image: "mookid8000/fleetmanager:4.28.6"
  #  restart: "unless-stopped"
  #  ports:
  #    - "5000:5000"
  #  volumes:
  #    - servicebus_directory:/usr/share/servicebus
  #  logging:
  #    driver: "json-file"
  #    options:
  #      max-size: "50m"
