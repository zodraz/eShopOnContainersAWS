name: "Build and push image"
description: "Builds and pushes an image to a registry"

inputs:
  service:
    description: "Service to build"
    required: true
  registry_endpoint:
    description: "Image registry repo e.g. aws_account_id.dkr.ecr.region.amazonaws.com/eshop"
    required: true
  image_name:
    description: "Name of image"
    required: true
  aws-access-key-id:
    description: "AWS Acces Key Id"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true
  aws-region: 
    description: "AWS Region"
    required: true
  
runs:
  using: "composite"
  steps:
  - name: Enable experimental features for the Docker daemon and CLI
    shell: bash
    run: |
        echo $'{\n  "experimental": true\n}' | sudo tee /etc/docker/daemon.json
        mkdir -p ~/.docker
        echo $'{\n  "experimental": "enabled"\n}' | sudo tee ~/.docker/config.json
        sudo service docker restart
        docker version -f '{{.Client.Experimental}}'
        docker version -f '{{.Server.Experimental}}'

  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ inputs.aws-access-key-id }}
      aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
      aws-region: ${{ inputs.aws-region }}

  - name: Login to Amazon ECR
    id: login-ecr
    uses: aws-actions/amazon-ecr-login@v1

  - name: Set branch name as env variable
    run: |
      currentbranch=$(echo ${GITHUB_REF##*/})
      echo "running on $currentbranch"
      echo "BRANCH=$currentbranch" >> $GITHUB_ENV
    shell: bash

  - name: Compose build ${{ inputs.service }}
    shell: bash
    run: sudo -E docker-compose build ${{ inputs.service }}
    working-directory: ./src
    env:
      TAG: ${{ env.BRANCH }}
      REGISTRY: ${{ inputs.registry_endpoint }}

  - name: Create ECR repository if not exists eshop/${{ inputs.image_name }}
    uses: int128/create-ecr-repository-action@v1
    id: ecr
    with:
      repository: eshop/${{ inputs.image_name }}

  - name: Compose push ${{ inputs.service }}
    shell: bash
    run: sudo -E docker-compose push ${{ inputs.service }}
    working-directory: ./src
    env:
      TAG: ${{ env.BRANCH }}
      REGISTRY: ${{ steps.ecr.outputs.repository-uri }}

  # - name: Docker tag for ECR ${{ inputs.service }}
  #   shell: bash
  #   run: |
  #     IMAGE_ID=$(sudo docker images --filter=reference=${{ inputs.registry_endpoint }}/${{ inputs.image_name }} --format "{{.ID}}")
  #     echo "IMAGE_ID: $IMAGE_ID"
  #     sudo -E docker tag $IMAGE_ID ${{ steps.ecr.outputs.repository-uri }}:${{ env.BRANCH }}
  #   working-directory: ./src

  # - name: Docker tag for ECR on Linux ${{ inputs.service }}
  #   shell: bash
  #   run: |
  #     IMAGE_ID=$(sudo docker images --filter=reference=${{ inputs.registry_endpoint }}/${{ inputs.image_name }} --format "{{.ID}}")
  #     echo "IMAGE_ID: $IMAGE_ID"
  #     sudo -E docker tag $IMAGE_ID ${{ steps.ecr.outputs.repository-uri }}:linux-${{ env.BRANCH  }}
  #   working-directory: ./src

  # - name: Docker tag for ECR on Linux ${{ inputs.service }}
  #   shell: bash
  #   run: |
  #     IMAGE_ID=$(sudo docker images --filter=reference=${{ inputs.registry_endpoint }}/${{ inputs.image_name }} --format "{{.ID}}")
  #     echo "IMAGE_ID: $IMAGE_ID"
  #     sudo -E docker tag $IMAGE_ID ${{ steps.ecr.outputs.repository-uri }}:latest
  #   working-directory: ./src

  - name: Run Trivy vulnerability scanner
    uses: aquasecurity/trivy-action@master
    with:
       image-ref: '${{ steps.ecr.outputs.repository-uri }}:linux-${{ env.BRANCH  }}'
       format: 'table'
       ignore-unfixed: true
       exit-code: '0'
       vuln-type: 'os,library'
       severity: 'CRITICAL,HIGH'

  - name: Docker list images
    shell: bash
    run: sudo -E docker images
    working-directory: ./src

  - name: Docker push ${{ inputs.service }}
    shell: bash
    run: sudo -E docker push ${{ steps.ecr.outputs.repository-uri }}:${{ env.BRANCH }}
    working-directory: ./src
  
  # - name: Docker push ${{ inputs.service }}
  #   shell: bash
  #   run: sudo -E docker push ${{ steps.ecr.outputs.repository-uri }}:linux-${{ env.BRANCH  }}
  #   working-directory: ./src

  # - name: Docker push ${{ inputs.service }}
  #   shell: bash
  #   run: sudo -E docker push ${{ steps.ecr.outputs.repository-uri }}:latest
  #   working-directory: ./src

  - name: Create multiarch manifest
    shell: bash
    run: |
      docker --config ~/.docker manifest create ${{ steps.ecr.outputs.repository-uri }}:${{ env.BRANCH  }} ${{ steps.ecr.outputs.repository-uri }}:linux-${{ env.BRANCH  }}
      docker --config ~/.docker manifest push ${{ steps.ecr.outputs.repository-uri }}:${{ env.BRANCH  }}